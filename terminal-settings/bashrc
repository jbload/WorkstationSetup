export HISTCONTROL=ignoreboth
export HISTSIZE=1000
export HISTFILESIZE=2000
export GIT_DUET_ROTATE_AUTHOR=1
export GIT_DUET_ALLOW_MULTIPLE_COMMITTERS=1

export git_repos=()
: '
This could be set explicitly like:
    export git_repos=(
        ~/workspace/repo1
        ~/workspace/repo2
        ~/workspace/repo3
    )

Or it you can use wildcards like:
    export git_repos=(~/workspace/client-*)
'
export WORKSPACE=~/workspace
if [ -f ~/.bashrc-pre-init ]; then
    . ~/.bashrc-pre-init
fi

shopt -s histappend
shopt -s checkwinsize
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
# If you come from bash you might have to change your $PATH.
export PATH=$PATH:$HOME/bin
export PATH=$PATH:/usr/local/bin/
export PATH=$PATH:/usr/local

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]: \[\033[01;34m\]\w\[\033[00m\]\n\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h: \w\n\$ '
fi

unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

if command -v microk8s kubectl version &> /dev/null; then
    alias mks='microk8s'
    alias kubectl='microk8s kubectl'
fi

if command -v kubectl version &> /dev/null; then
    alias k=kubectl
    alias kctx=kubectx
    . <(kubectl completion bash)
    complete -F __start_kubectl k
fi	

if command -v terraform version &> /dev/null; then
    alias tf=terraform
    terraform_path=$(which terraform)
    complete -o nospace -C $terraform_path terraform tf
    unset terraform_path
fi	

if [ -f $HOME/.kube/config ]; then
    export KUBECONFIG=$KUBECONFIG:$HOME/.kube/config 
fi

# User configuration
if command -v subl &> /dev/null; then
    editor_path=$(which subl)
    alias edit='subl'    
elif command -v code &> /dev/null; then
    editor_path=$(which code)        
    alias edit='code'
elif command -v code-insiders &> /dev/null; then
    editor_path=$(which code-insiders)        
    alias edit='code-insiders'    
else
    alias edit='vi'
fi

if command -v vim &> /dev/null; then
    export KUBE_EDITOR=vim
else
    export KUBE_EDITOR=vi
fi

if [ -f $editor_path ]; then
    export EDITOR=$editor_path 
fi

unset editor_path

export BLOCKSIZE=1k
export NODE_OPTIONS=--max_old_space_size=8192
export PIPENV_VENV_IN_PROJECT=1
export ASPNETCORE_ENVIRONMENT=Development

# You may need to manually set your language environment
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
alias ...='cd ../../'                       # Go back 2 directory levels
alias ..='cd ../'                           # Go back 1 directory level
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias bashrc='. ~/.bashrc'
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
alias cl='clear'                            # cl:           Clear terminal display
alias cls='clear'                           # cls:          Clear terminal display
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop
alias editbashrc='edit ~/.bashrc'
alias editgitconfig='edit ~/.gitconfig'
alias editzshrc='edit ~/.zshrc'
alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias ll='ls -FGlAhp'                       # Preferred 'ls' implementation
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias myip='curl https://dynamicdns.park-your-domain.com/getip'                    # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias show_options='shopt'                  # Show_options: display bash options settings
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs
alias ws='cd $WORKSPACE'
alias xcdd='rm -rf ~/Library/Developer/Xcode/DerivedData'
alias ~="cd ~"                              # ~:            Go Home
alias yui="yarn upgrade-interactive"

cd () { builtin cd "$@"; ll; }              # Always list directory contents upon 'cd'
mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder

gitsyncall () {
    local dirty_repos=()

    for repo in $git_repos
    do
        pushd $repo &> /dev/null

        if [ -n "$(git status --porcelain)" ]; then            
            dirty_repos+=($repo)
        else
            echo "********************************************************************************"
            echo "Synching git repo: $repo..."
            git up
            git pushf
            git com
            git up
            git pushf
            git co -
        fi
        
        popd &> /dev/null
    done

    if [ ${#dirty_repos[@]} -gt 0 ]; then
        echo "\nThe following repos were skipped because they had pending changes:"

        for dirty_repo in $dirty_repos            
        do
            echo "   $dirty_repo"
        done
    fi
}

gitstall () {
    local clean_repos=()

    for repo in $git_repos
    do
        pushd $repo &> /dev/null

        if [ -n "$(git status --porcelain)" ]; then   
            echo "********************************************************************************"
            echo "git status: $repo..."
            git st                     
        else
            clean_repos+=($repo)
        fi

        popd &> /dev/null
    done

    if [ ${#clean_repos[@]} -gt 0 ]; then
        echo "\nThe following repos were skipped because they had no pending changes:"

        for clean_repo in $clean_repos            
        do
            echo "   $clean_repo"
        done
    fi
}

gitgcall () {
    for repo in $git_repos
    do
        pushd $repo &> /dev/null

        echo "********************************************************************************"
        echo "Performing maintenance on git repo: $repo..."
        gitgc

        popd &> /dev/null
    done
}

gitgc () {
    git maintenance run --task gc
}

gitpruneall () {
    for repo in $git_repos
    do
        pushd $repo &> /dev/null

        echo "********************************************************************************"
        echo "Looking for local branches to delete from git repo: $repo..."
        gitclean

        popd &> /dev/null
    done
}

gitprune () {
    local branch_names=()

    git branch | grep -v '^*\|master\|main' | while read -r branch
    do
        branch_names+=($branch)
    done

    if [ ${#branch_names[@]} -gt 0 ]; then
        echo "\nLocal branches:"
        printf '%s\n   ' "${branch_names[@]}"
        echo ""

        if read -q "choice?Are you sure you want to remove these branches? (y/n): "; then
            for branch in $branch_names
            do
                git branch -D $branch
            done       
        else
            echo "\nNo branches were deleted."
        fi
    else
        echo "There are no local branches to delete."
    fi
}

    gitgc
}

# https://github.com/magicmonty/bash-git-prompt
if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_ONLY_IN_REPO=1
    GIT_PROMPT_START="\033[01;32m\]\u@\h\[\033[00m\] \w"    
    GIT_PROMPT_END="\n$ "
    GIT_PROMPT_THEME_NAME=Solarized
    . $HOME/.bash-git-prompt/gitprompt.sh
fi

if [[ -v $GO_TO_WORKSPACE_ON_STARTUP ]]; then
    builtin cd $WORKSPACE
fi

if [ -f ~/.bashrc-post-init ]; then
    . ~/.bashrc-post-init
fi

if command -v pyenv &> /dev/null; then
  eval "$(pyenv init -)"
fi

if command -v rbenv &> /dev/null; then
    eval "$(rbenv init -)"
fi

if command -v direnv &> /dev/null; then
    eval "$(direnv hook bash)"
fi

if [[ -v $CLEAR_SCREEN_ON_STARTUP ]]; then
    clear
fi

date