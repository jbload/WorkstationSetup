[advice]
	skippedCherryPicks = false
[alias]
	aa = add -A
	ac = !git add -A && git commit -m
	adc = !git add -A && git duet-commit -m
	aliases = "!git config -l | grep ^alias\\. | cut -c 7-"
	aaamend = !git aa && git amend
	aaamendit = !git aa && git amendit
	amend = commit --amend
	amendit = commit --amend --no-edit
	bclean = "!f() { DEFAULT=$(git default); git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; }; f"
	bdone = "!f() { DEFAULT=$(git default); git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; }; f"
	br = branch
	branches = branch -a
	churn = !git --no-pager log --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head
	ci = commit -m
	co = checkout
	cob = checkout -b
	com = "!f() { DEFAULT=$(git default); git checkout ${1-$DEFAULT}; }; f"
	conflicts = !git diff --name-only --diff-filter=U
	contrib = shortlog -e --summary --numbered
	cp = cherry-pick
	dci = duet-commit
	dmg = duet-merge
	default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
	di = diff
	drb = rebase -i --exec 'git duet-commit --amend'
	drv = duet-revert
	ds = diff --staged
	ec = config --global -e
	fixup = commit --fixup
	ftdone = "!f() { DEFAULT=$(git default); FEATURE=$(git rev-parse --abbrev-ref HEAD); if OUTPUT=$(git status --porcelain | wc -l) && [ $OUTPUT -eq 0 ]; then git checkout -q ${1-$DEFAULT}; echo "On $DEFAULT branch. Pulling changes from remote."; git pull --rebase; echo "Merging changes from branch: $FEATURE"; git merge --squash $FEATURE; echo "Ready to commit."; else echo "Git repo is dirty."; fi }; f"
	ftstart = "!f() { DEFAULT=$(git default); git checkout -q $DEFAULT; echo "On $DEFAULT branch. Pulling changes from remote."; git pull --rebase --prune; git checkout -b $1; echo "Checked out new branch: $1"; }; f"
	hist = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	lg = log --graph --decorate --oneline --all
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	migrate = "!f() { DEFAULT=$(git default); CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-$CURRENT@{u}} && git rebase --onto ${2-$DEFAULT} $CURRENT; }; f" # Moves a set of commits from the current branch to another
	prn = "!f() { git tag -l | xargs git tag -d; git fetch --tags && git fetch --prune && git gc; }; f"
	pushup = !git push -u origin HEAD
	pushf = pushup --force-with-lease
	rba = rebase --abort
	rbc = !git add -A && git rebase --continue
	rbi = rebase --interactive
	reauthor = commit --amend --reset-author --no-edit
	remotes = remote -v
	reword = commit --amend
	save = !git add -A && git commit -m 'SAVEPOINT'
	squash = commit --squash
	st = status
	sta = stash
	stashes = stash list
	sync = !git pull --rebase && git push
	undo = reset HEAD~1 --mixed
	unstage = reset -q HEAD --
	up = !git pull --rebase --prune $@ && git submodule update --init --recursive
	wip = !git add -u && git commit -m "WIP"
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
[branch]
	autosetuprebase = always
[core]
	editor = code --wait
	excludesfile = ~/.gitignore_global
	hooksPath = ~/workspace/git-hooks-core
	autocrlf = input
[diff]
	tool = bc
[difftool]
	prompt = false
[http]
	postBuffer = 524288000
[init]
	defaultBranch = master
	templateDir = ~/workspace/git-templates	
[merge]
	tool = bc
[mergetool]
	keepBackup = false
	prompt = false
[mergetool "bc"]
	trustExitCode = true
[pull]
	rebase = true
[trailer]
	ifexists = addIfDifferent	
[transfer]
	fsckobjects = true
[user]
	email = jbload@users.noreply.github.com
	name = Justin Loadholtz